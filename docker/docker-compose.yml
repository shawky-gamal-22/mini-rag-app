services:
  # FastAPI Application
  fastapi:
    build: 
      context: ..
      dockerfile: docker/minirag/Dockerfile
    container_name: fastapi
    ports:
      - "8000:8000"
    volumes:
      - fastapi_data:/app/assets
    networks:
      - backend
    restart: always
    depends_on:
      pgvector:
        condition: service_healthy
    env_file:
      - ./env/.env.app

  # FrontEnd
  frontend:
    build:
      context: ..
      dockerfile: docker/frontend/Dockerfile
    container_name: frontend
    ports:
      - "8501:8501"
    volumes:
      - ../streamlit_app:/app
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - fastapi

  # Nginx Service
  nginx:
    image: nginx:stable-alpine3.21-perl
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - fastapi
    networks:
      - backend
    restart: always


  # PostgreSQL Database (pgvector)
  pgvector:
    image: pgvector/pgvector:0.8.0-pg17
    container_name: pgvector
    ports:
      - "5400:5432"
    volumes:
      - pgvector:/var/lib/postgresql/data
    env_file:
      - ./env/.env.postgres
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s


  # Qdrant (Vector Database)
  qdrant:
    image: qdrant/qdrant:v1.15.1
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - backend
    restart: always


  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
    restart: always
    command: 
     - '--config.file=/etc/prometheus/prometheus.yml'
     - '--storage.tsdb.path=/prometheus'
     - '--web.console.libraries=/etc/prometheus/console_libraries'
     - '--web.console.templates=/etc/prometheus/consoles'
     - '--web.enable-lifecycle'


  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:12.2.0-16557133545-ubuntu
    container_name: grafana
    ports:
    - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - ./env/.env.grafana
    depends_on:
      - prometheus
    networks:
      - backend
    restart: always


  # Node Exporter (Metrics Collection) for system metrics
  node-exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.softnet'
      - '--no-collector.netstat'
    networks:
      - backend
    restart: always

  # Postgres Exporter (Metrics Collection) for PostgreSQL metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.1
    container_name: postgres-exporter
    ports:
    - "9187:9187"
    env_file:
      - ./env/.env.postgres-exporter
    depends_on:
      - pgvector
    networks:
      - backend
    restart: always


  # Rabbitmq service (Broker service)
  rabbitmq:
    image: rabbitmq:4.1.2-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672" # AMQP port (Portocol that rabbitmq work with)
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    env_file:
      - ./env/.env.rabbitmq
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics","ping"]
      timeout: 10s
      retries: 5
  
  # Redis (Results Backend & Cache)
  redis:
    image: redis:8.0.3-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - "redis_data:/data"
    env_file:
      - ./env/.env.redis
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      timeout: 10s
      retries: 5
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD:-minirag_redis_2222}"]
    


networks:
  backend:
    driver: bridge

volumes:
  fastapi_data:
  pgvector:
  qdrant_data:
  grafana_data:
  prometheus_data:
  rabbitmq_data:
  redis_data:

    
